# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqYg1RlEczXn8dePBuk2laav3BkJFr4C
"""
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models
import torch.optim as optim
from time import time
from os import listdir
from numpy import asarray
from numpy import vstack
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
from numpy import savez_compressed
import torch
from torchvision import transforms
from PIL import Image
from numpy import load
from matplotlib import pyplot
import argparse
import itertools
import os
import random

import torch.backends.cudnn as cudnn
import torch.utils.data
import torchvision.transforms as transforms
import torchvision.utils as vutils
from PIL import Image
from tqdm import tqdm
from torchvision.utils import save_image
from IPython.display import clear_output
import matplotlib.pyplot as plt
import numpy as np

from models import SegNet
from models import ConvNet
from loading data import load_images
from loading data import load_images2
from utils import ReplayBuffer
from utils import DecayLR
from utils import weights_init

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models
import torch.optim as optim
from time import time
import torch.nn as nn
import torch.nn.functional as F

from torchvision.utils import save_image
from IPython.display import clear_output
import matplotlib.pyplot as plt
import numpy as np


model=torch.load("g_model_AtoB_000188.h5")

DEVICE = torch.device("cuda")
device=torch.device("cuda")

import torch.nn.functional as F
import cv2
def show(pic):
    
    pyplot.subplot(2, 1 , 2)
    pyplot.axis('off')
    pic=torch.squeeze(pic)
    ch, h, w= pic.size()
    #fake1=fake[i].reshape(h, w, ch)
    fake1=pic.permute(1, 2, 0)
    fake1=fake1.cpu()
    fake1=fake1.detach().numpy()
    mean = np.array([0.5, 0.5, 0.5])
    std = np.array([0.5, 0.5, 0.5])
    #mean = np.array([0.4914, 0.4822, 0.4465])
    #std = np.array([0.2023, 0.1994, 0.2010])
    fake1 = std * fake1 + mean
    fake1 = np.clip(fake1, 0, 1)
    #fake1=Image.fromarray(fake1)
    #resized_image = t(fake1)
    #fake1=img_to_array(fake1)
    fake1 = cv2.resize(fake1, dsize=(512, 512), interpolation=cv2.INTER_CUBIC)
    plt.imshow(fake1)
    #pyplot.show()
    filename1 = 'pic.jpg'
    pyplot.savefig(filename1)
    pyplot.close()
    return fake1

def predict_one_sample(model, inputs, device=DEVICE):
    """Предсказание, для одной картинки"""
    with torch.no_grad():
        inputs = inputs.to(device)
        model.eval()
        res = model(inputs).cpu()
        #probs = torch.nn.functional.softmax(logit, dim=-1).numpy()
        res= show(res)
    return res

from matplotlib import pyplot
from torchvision.utils import save_image


def workit(model,image):
    k=predict_one_sample(model,image)
    plt.imshow(k)
    plt.axis('off')
    #pyplot.show()
    filename1 = 'pic1.jpg'
    pyplot.savefig(filename1, bbox_inches='tight')
    pyplot.close()

import telegram_send
telegram_token = '1583691133:AAHrob5dmPKtm5LDGibCB5xBAgCzsxeL3eg'
chat_id = '642852704'
path_config = telegram_send.get_config_path()
with open(path_config, 'w') as f:
    f.write(f'[telegram]\ntoken = {telegram_token}\nchat_id = {chat_id}')
telegram_send.send(messages=["Telegram bot synced!"])


import logging
from io import BytesIO
import numpy as np
import requests
from PIL import Image
from skimage.transform import rescale, resize
import telebot

MSG_GREETING = "Hi!"

bot = telebot.TeleBot(telegram_token)
telebot.logger.setLevel(logging.DEBUG)

@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, MSG_GREETING)


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, message.text)

@bot.message_handler(content_types= ["photo"])
def pixelate_photo(message):
    bot.send_message(message.chat.id, "Got your photo. Start working..")
    # Getting photo
    file_info = bot.get_file(message.photo[-1].file_id)
    r = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(telegram_token, file_info.file_path))
    #img = np.array(Image.open(BytesIO(r.content)))
    img = Image.open(BytesIO(r.content))
    img=load_image2(img)
    image=torch.from_numpy(img)
    image=torch.unsqueeze(image,0)
    # Process
    #res = pixel_me.pixelate(img)['img_segm_small_w_contour']
    res=workit(model,image)
    """plt.imshow(res)
    #pyplot.show()
    filename1 = 'res.jpg'
    pyplot.savefig(filename1)
    pyplot.close()"""

    # Resizing
    #res = rescale(res, (int(512 / res.shape[0]), int(512 / res.shape[0]), 1),
                           #anti_aliasing=False, order=0)
    # Sending back
    buf = BytesIO()
    #res = (1/(2*2.25)) * res + 0.5
    #plt.imsave(buf, res, format='jpg')
    #bot.send_photo(message.chat.id, buf.getvalue())
    res=load_img('pic1.jpg')
    bot.send_photo(message.chat.id, res)



bot.polling()
