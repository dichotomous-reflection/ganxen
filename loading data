from os import listdir
from numpy import asarray
from numpy import vstack
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img
from numpy import savez_compressed
import torch
from torchvision import transforms
from PIL import Image

transform=transforms.Compose([
    #transforms.Resize(int(args.image_size * 1.12), Image.BICUBIC),
    #transforms.RandomCrop(args.image_size),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
# load all images in a directory into memory
def load_images(path, size=(256,256)):
    data_list = list()
    n=0
    # enumerate filenames in directory
    for filename in listdir(path):
        n+=1
        # load and resize the image
        pixels = load_img(path + filename, target_size=size)
        # convert to numpy array
        pixels = transform(pixels)
        pixels = img_to_array(pixels)
        # store
        data_list.append(pixels)
        # memory is limited, so...
        if n>=500:
            break
    return asarray(data_list)
    
path ='../input/vangogh'   
dataA = load_images(path + '/photo_jpg/')
print('Loaded dataA: ', dataA.shape)
# load dataset B
dataB1 = load_images(path + '/archive (5)/Auvers sur Oise/')
dataB2 = load_images(path + '/archive (5)/Saint Remy/')
dataB = vstack((dataB1, dataB2))
#dataB = load_images(path + '/monet_jpg/')
print('Loaded dataB: ', dataB.shape)
# save as compressed numpy array

filename = 'vang_256.npz'


savez_compressed(filename, dataA, dataB)
print('Saved dataset: ', filename)

from numpy import load
from matplotlib import pyplot
# load the dataset

data = load('vang_256.npz')
dataA, dataB = data['arr_0'], data['arr_1']
print('Loaded: ', dataA.shape, dataB.shape)

dataA=torch.from_numpy(dataA)
dataB=torch.from_numpy(dataB)

from torch.utils.data import DataLoader
batch_size = 1
data_A = DataLoader(dataA, batch_size=batch_size, shuffle=True)
data_B = DataLoader(dataB, batch_size=batch_size, shuffle=True)
